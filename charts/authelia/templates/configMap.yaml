{{- if (include "authelia.generate.configMap" .) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "authelia.name" . }}
  labels: {{ include "authelia.labels" (merge (dict "Labels" .Values.configMap.labels) .) | nindent 4 }}
  {{- with $annotations := include "authelia.annotations" (merge (dict "Annotations" .Values.configMap.annotations) .) }}
  annotations: {{ $annotations | nindent 4 }}
  {{- end }}
data:
  {{ default "configuration.yaml" .Values.configMap.key }}: |
    ---
    host: 0.0.0.0
    port: {{ default 9091 .Values.configMap.port }}
    theme: {{ default "light" .Values.configMap.theme }}
    log_level: {{ default "info" .Values.configMap.log_level  }}
    default_redirection_url: {{ default (printf "https://www.%s" .Values.domain) .Values.configMap.default_redirection_url }}
    {{- if (include "authelia.enabled.certificatesSecret" .) }}
    certificates_directory: /certificates
    {{- end }}
    server: {{ toYaml .Values.configMap.server | nindent 6 }}
    totp:
      issuer: {{ default .Values.domain .Values.configMap.totp.issuer }}
      period: {{ default 30 .Values.configMap.totp.period }}
      skew: {{ default 1 .Values.configMap.totp.skew }}
    {{- if include "authelia.configured.duo" . }}
    duo_api:
      hostname: {{ .Values.configMap.duo_api.hostname }}
      integration_key: {{ .Values.configMap.duo_api.integration_key }}
    {{- end }}
    {{- with $auth := .Values.configMap.authentication_backend }}
    authentication_backend:
      disable_reset_password: {{ $auth.disable_reset_password }}
    {{- if $auth.file.enabled }}
      file:
        path: {{ $auth.file.path }}
        password: {{ toYaml $auth.file.password | nindent 10 }}
    {{- end }}
    {{- if $auth.ldap.enabled }}
      ldap:
        implementation: {{ default "custom" $auth.ldap.implementation }}
        url: {{ $auth.ldap.url }}
        start_tls: {{ $auth.ldap.start_tls }}
        tls: {{ toYaml $auth.ldap.tls | nindent 10 }}
    {{- if $auth.ldap.base_dn }}
        base_dn: {{ $auth.ldap.base_dn }}
    {{- end }}
    {{- if $auth.ldap.username_attribute }}
        username_attribute: {{ $auth.ldap.username_attribute }}
    {{- end }}
    {{- if $auth.ldap.additional_users_dn }}
        additional_users_dn: {{ $auth.ldap.additional_users_dn }}
    {{- end }}
    {{- if $auth.ldap.users_filter }}
        users_filter: {{ $auth.ldap.users_filter }}
    {{- end }}
    {{- if $auth.ldap.additional_groups_dn }}
        additional_groups_dn: {{ $auth.ldap.additional_groups_dn }}
    {{- end }}
    {{- if $auth.ldap.groups_filter }}
        groups_filter: {{ $auth.ldap.groups_filter }}
    {{- end }}
    {{- if $auth.ldap.group_name_attribute }}
        group_name_attribute: {{ $auth.ldap.group_name_attribute }}
    {{- end }}
    {{- if $auth.ldap.mail_attribute }}
        mail_attribute: {{ $auth.ldap.mail_attribute }}
    {{- end }}
    {{- if $auth.ldap.display_name_attribute }}
        display_name_attribute: {{ $auth.ldap.display_name_attribute }}
    {{- end }}
        user: {{ $auth.ldap.user }}
    {{- end }}
    {{- end }}
    {{- with $session := .Values.configMap.session }}
    session:
      name: {{ default "authelia_session" $session.name }}
      domain: {{ required "A valid .Values.domain entry required!" $.Values.domain }}
      same_site: {{ default "lax" $session.same_site }}
      expiration: {{ default "1M" $session.expiration }}
      inactivity: {{ default "5m" $session.inactivity }}
      remember_me_duration: {{ default "1M" $session.remember_me_duration }}
    {{- if $session.redis.enabled }}
      redis:
        host: {{ $session.redis.host }}
        port: {{ default 6379 $session.redis.port }}
        {{- if not (eq $session.redis.username "") }}
        username: {{ $session.redis.username }}
        {{- end }}
        maximum_active_connections: {{ default 8 $session.redis.maximum_active_connections }}
        minimum_idle_connections: {{ default 0 $session.redis.minimum_idle_connections }}
    {{- if $session.redis.tls.enabled }}
        tls:
          server_name: {{ $session.redis.tls.server_name }}
          skip_verify: {{ $session.redis.tls.skip_verify }}
          minimum_version: {{ default "TLS1.2" $session.redis.tls.minimum_version }}
    {{- end }}
    {{- if $session.redis.high_availability.enabled }}
        high_availability:
          sentinel_name: {{ $session.redis.high_availability.sentinel_name }}
    {{- if $session.redis.high_availability.nodes }}
          nodes: {{ toYaml $session.redis.high_availability.nodes | nindent 10 }}
    {{- end }}
          route_by_latency: {{ $session.redis.high_availability.route_by_latency }}
          route_randomly: {{ $session.redis.high_availability.route_randomly }}
    {{- end }}
    {{- end }}
    {{- end }}
    regulation: {{ toYaml .Values.configMap.regulation | nindent 6 }}
    storage:
    {{- with $storage := .Values.configMap.storage }}
    {{- if $storage.local.enabled }}
      local:
        path: {{ $storage.local.path }}
    {{- end }}
    {{- if $storage.mysql.enabled }}
      mysql:
        host: {{ $storage.mysql.host }}
        port: {{ default 3306 $storage.mysql.port }}
        database: {{ default "authelia" $storage.mysql.database }}
        username: {{ default "authelia" $storage.mysql.username }}
    {{- end }}
    {{- if $storage.postgres.enabled }}
      postgres:
        host: {{ $storage.postgres.host }}
        port: {{ default 5432 $storage.postgres.port }}
        database: {{ default "authelia" $storage.postgres.database }}
        username: {{ default "authelia" $storage.postgres.username }}
        sslmode: {{ default "disable" $storage.postgres.sslmode }}
    {{- end }}
    {{- end }}
    {{- with $notifier := .Values.configMap.notifier }}
    notifier:
      disable_startup_check: {{ $.Values.configMap.notifier.disable_startup_check }}
    {{- if $notifier.filesystem.enabled }}
      filesystem:
        filename: {{ $notifier.filesystem.filename }}
    {{- end }}
    {{- if $notifier.smtp.enabled }}
      smtp:
        username: {{ $notifier.smtp.username }}
        host: {{ $notifier.smtp.host }}
        port: {{ default 25 $notifier.smtp.port }}
        sender: {{ $notifier.smtp.sender }}
        identifier: {{ $notifier.smtp.identifier }}
        subject: {{ $notifier.smtp.subject | quote }}
        startup_check_address: {{ $notifier.smtp.startup_check_address }}
        disable_require_tls: {{ $notifier.smtp.disable_require_tls }}
        disable_html_emails: {{ $notifier.smtp.disable_html_emails }}
        tls: {{ toYaml $notifier.smtp.tls | nindent 10 }}
    {{- end }}
    {{- end }}
    {{- if .Values.configMap.identity_providers.oidc.enabled }}
    identity_providers:
      oidc:
        clients:
    {{- range $client := .Values.configMap.identity_providers.oidc.clients }}
        - id: {{ $client.id }}
          description: {{ default $client.id $client.description }}
          authorization_policy: {{ default "two_factor" $client.authorization_policy }}
          secret: {{ default (randAlphaNum 128) $client.secret }}
          redirect_uris: {{ toYaml $client.redirect_uris | nindent 10 }}
          scopes: {{ toYaml (default (list "openid" "profile" "email" "groups") $client.scopes) | nindent 10 }}
          grant_types: {{ toYaml (default (list "refresh_token" "authorization_code") $client.grant_types) | nindent 10 }}
          response_types: {{ toYaml (default (list "code") $client.response_types) | nindent 10 }}
    {{- end }}
    {{- end }}
    access_control:
    {{- if (eq (len .Values.configMap.access_control.rules) 0) }}
      {{- if (eq .Values.configMap.access_control.default_policy "bypass") }}
      default_policy: one_factor
      {{- else if (eq .Values.configMap.access_control.default_policy "deny") }}
      default_policy: two_factor
      {{- else }}
      default_policy: {{ .Values.configMap.access_control.default_policy }}
      {{- end }}
    {{- else }}
      default_policy: {{ .Values.configMap.access_control.default_policy }}
    {{- end }}
    {{- if (eq (len .Values.configMap.access_control.networks) 0) }}
      networks: []
    {{- else }}
      networks: {{ toYaml .Values.configMap.access_control.networks | nindent 6 }}
    {{- end }}
    {{- if (eq (len .Values.configMap.access_control.rules) 0) }}
      rules: []
    {{- else }}
      rules: {{ toYaml .Values.configMap.access_control.rules | nindent 6 }}
    {{- end }}
    ...
    {{- end }}
