{{- if (include "authelia.generate.configMap" .) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "authelia.name" . }}
  labels: {{ include "authelia.labels" (merge (dict "Labels" .Values.configMap.labels) .) | nindent 4 }}
  {{- with $annotations := include "authelia.annotations" (merge (dict "Annotations" .Values.configMap.annotations) .) }}
  annotations: {{ $annotations | nindent 4 }}
  {{- end }}
data:
  {{ .Values.configMap.key | default "configuration.yaml" }}: |
    ---
    {{ include "authelia.schema" (merge (dict "SchemaName" "configuration") .) }}
    {{- if (include "authelia.enabled.certificatesSecret" .) }}
    certificates_directory: '/certificates'
    {{- end }}
    theme: {{ .Values.configMap.theme | default "light" | squote }}
    default_2fa_method: {{ .Values.configMap.default_2fa_method | default "" | squote }}
    server:
      address: {{ printf "tcp://0.0.0.0:%d%s" ((.Values.configMap.server.port | default 9091) | int) (include "authelia.path" .) | squote }}
      asset_path: {{ .Values.configMap.server.asset_path | default "" | squote }}
      headers:
        csp_template: {{ .Values.configMap.server.headers.csp_template | default "" | squote }}
      buffers:
        read: {{ .Values.configMap.server.buffers.read | default 4096 }}
        write: {{ .Values.configMap.server.buffers.write | default 4096 }}
      timeouts:
        read: {{ include "authelia.func.dquote" (.Values.configMap.server.timeouts.read | default "6 seconds") }}
        write: {{ include "authelia.func.dquote" (.Values.configMap.server.timeouts.write | default "6 seconds") }}
        idle: {{ include "authelia.func.dquote" (.Values.configMap.server.timeouts.idle | default "30 seconds") }}
      endpoints:
        enable_pprof: {{ .Values.configMap.server.endpoints.enable_pprof | default false }}
        enable_expvars: {{ .Values.configMap.server.endpoints.enable_expvars | default false }}
        authz:
        {{- range $name, $endpoint := (include "authelia.authz" .) | fromJson }}
        {{- tpl ($.Files.Get "files/configuration.server.endpoints.authz.yaml") (merge (dict "Name" $name "Endpoint" $endpoint) $) | trim | nindent 10 }}
        {{- end }}
    log:
      level: {{ .Values.configMap.log.level | default "info" | squote }}
      format: {{ .Values.configMap.log.format | default "text" | squote }}
      file_path: {{ .Values.configMap.log.file_path | default "" | squote }}
      keep_stdout: true
    telemetry:
      metrics:
        enabled: {{ .Values.configMap.telemetry.metrics.enabled | default false }}
        {{- if .Values.configMap.telemetry.metrics.enabled }}
        address: {{ printf "tcp://0.0.0.0:%d" ((.Values.configMap.telemetry.metrics.port | default 9959) | int) | squote }}
        buffers:
          read: {{ .Values.configMap.telemetry.metrics.buffers.read | default 4096 }}
          write: {{ .Values.configMap.telemetry.metrics.buffers.write | default 4096 }}
        timeouts:
          read: {{ include "authelia.func.dquote" (.Values.configMap.telemetry.metrics.timeouts.read | default "6 seconds") }}
          write: {{ include "authelia.func.dquote" (.Values.configMap.telemetry.metrics.timeouts.write | default "6 seconds") }}
          idle: {{ include "authelia.func.dquote" (.Values.configMap.telemetry.metrics.timeouts.idle | default "30 seconds") }}
        {{- end }}
    identity_validation:
      elevated_session:
        code_lifespan: {{ include "authelia.func.dquote" (.Values.configMap.identity_validation.elevated_session.code_lifespan | default "5 minutes") }}
        elevation_lifespan: {{ include "authelia.func.dquote" (.Values.configMap.identity_validation.elevated_session.elevation_lifespan | default "10 minutes") }}
        characters: {{ .Values.configMap.identity_validation.elevated_session.characters | default 8 }}
        require_second_factor: {{ .Values.configMap.identity_validation.elevated_session.require_second_factor | default false }}
        skip_second_factor: {{ .Values.configMap.identity_validation.elevated_session.skip_second_factor | default false }}
      reset_password:
        jwt_lifespan: {{ include "authelia.func.dquote" (.Values.configMap.identity_validation.reset_password.expiration | default "5 minutes") }}
        jwt_algorithm: {{ .Values.configMap.identity_validation.reset_password.jwt_algorithm | default "HS256" | squote }}
    totp:
      disable: {{ .Values.configMap.totp.disable | default false }}
      issuer: {{ .Values.configMap.totp.issuer | default "Authelia" | squote }}
      skew: {{ .Values.configMap.totp.skew | default 1 }}
      secret_size: {{ .Values.configMap.totp.secret_size | default 32 }}
      algorithm: {{ .Values.configMap.totp.algorithm | default "SHA1" | squote }}
      digits: {{ .Values.configMap.totp.digits | default 6 }}
      period: {{ .Values.configMap.totp.period | default 30 }}
      allowed_algorithms:
      {{- range $algorithm := (.Values.configMap.totp.allowed_algorithms | default (list "SHA1")) }}
        - {{ $algorithm | squote }}
      {{- end }}
      allowed_digits:
      {{- range $digits := (.Values.configMap.totp.allowed_digits | default (list 6)) }}
        - {{ $digits }}
      {{- end }}
      allowed_periods:
      {{- range $periods := (.Values.configMap.totp.allowed_periods | default (list 30)) }}
        - {{ $periods }}
      {{- end }}
    webauthn:
      disable: {{ .Values.configMap.webauthn.disable | default false }}
      display_name: {{ .Values.configMap.webauthn.display_name | default "Authelia" | squote }}
      attestation_conveyance_preference: {{ .Values.configMap.webauthn.attestation_conveyance_preference | default "indirect" | squote }}
      user_verification: {{ .Values.configMap.webauthn.user_verification | default "preferred" | squote  }}
      timeout: {{ include "authelia.func.dquote" (.Values.configMap.webauthn.timeout | default "1 minute") }}
    {{- if include "authelia.configured.duo" . }}
    duo_api:
      hostname: {{ .Values.configMap.duo_api.hostname | squote }}
      integration_key: {{ .Values.configMap.duo_api.integration_key | squote }}
      enable_self_enrollment: {{ .Values.configMap.duo_api.enable_self_enrollment | default false }}
    {{- end }}
    ntp:
      address: {{ .Values.configMap.ntp.address | default "udp://time.cloudflare.com:123" | squote }}
      version: {{ .Values.configMap.ntp.version | default 3 }}
      max_desync: {{ include "authelia.func.dquote" (.Values.configMap.ntp.max_desync | default "3 seconds") }}
      disable_startup_check: {{ .Values.configMap.ntp.disable_startup_check | default false }}
      disable_failure: {{ .Values.configMap.ntp.disable_failure | default false }}
    {{- with $auth := .Values.configMap.authentication_backend }}
    authentication_backend:
      password_reset:
        disable: {{ include "authelia.config.password_reset.disable" $ }}
        custom_url: {{ $auth.password_reset.custom_url | default "" | squote }}
      {{- if $auth.file.enabled }}
      file:
        path: {{ $auth.file.path | squote }}
        watch: {{ $auth.file.watch }}
        search:
          email: {{ $auth.file.search.email | default false }}
          case_insensitive: {{ $auth.file.search.case_insensitive | default false }}
        password:
          algorithm: {{ $auth.file.password.algorithm | squote }}
          argon2:
            variant: {{ $auth.file.password.argon2.variant | default "argon2" | squote }}
            iterations: {{ $auth.file.password.argon2.iterations | default 3 }}
            memory: {{ $auth.file.password.argon2.memory | default 65536 }}
            parallelism: {{ $auth.file.password.argon2.parallelism | default 4 }}
            key_length: {{ $auth.file.password.argon2.key_length | default 32 }}
            salt_length: {{ $auth.file.password.argon2.salt_length | default 16 }}
          scrypt:
            iterations: {{ $auth.file.password.scrypt.iterations | default 16 }}
            block_size: {{ $auth.file.password.scrypt.block_size | default 8 }}
            parallelism: {{ $auth.file.password.scrypt.parallelism | default 1 }}
            key_length: {{ $auth.file.password.scrypt.key_length | default 32 }}
            salt_length: {{ $auth.file.password.scrypt.salt_length | default 16 }}
          pbkdf2:
            variant: {{ $auth.file.password.pbkdf2.variant | default "sha512" | squote }}
            iterations: {{ $auth.file.password.pbkdf2.iterations | default 310000 }}
            salt_length: {{ $auth.file.password.pbkdf2.salt_length | default 16 }}
          sha2crypt:
            variant: {{ $auth.file.password.sha2crypt.variant | default "sha512" | squote }}
            iterations: {{ $auth.file.password.sha2crypt.iterations | default 50000 }}
            salt_length: {{ $auth.file.password.sha2crypt.salt_length | default 16 }}
          bcrypt:
            variant: {{ $auth.file.password.bcrypt.variant | default "standard" | squote }}
            cost: {{ $auth.file.password.bcrypt.cost | default 12 }}
      {{- end }}
      {{- if $auth.ldap.enabled }}
      ldap:
        implementation: {{ $auth.ldap.implementation | default "custom" | squote }}
        address: {{ $auth.ldap.address | squote }}
        timeout: {{ include "authelia.func.dquote" ($auth.ldap.timeout | default "5 seconds") }}
        start_tls: {{ $auth.ldap.start_tls }}
        tls:
          server_name: {{ $auth.ldap.tls.server_name | default "" | squote }}
          skip_verify: {{ $auth.ldap.tls.skip_verify | default false }}
          minimum_version: {{ $auth.ldap.tls.minimum_version | default "TLS1.2" | squote }}
          maximum_version: {{ $auth.ldap.tls.maximum_version | default "TLS1.3" | squote }}
        {{- if $auth.ldap.base_dn }}
        base_dn: {{ $auth.ldap.base_dn | squote }}
        {{- end }}
        {{- if $auth.ldap.additional_users_dn }}
        additional_users_dn: {{ $auth.ldap.additional_users_dn | squote }}
        {{- end }}
        {{- if $auth.ldap.users_filter }}
        users_filter: {{ $auth.ldap.users_filter | squote }}
        {{- end }}
        {{- if $auth.ldap.additional_groups_dn }}
        additional_groups_dn: {{ $auth.ldap.additional_groups_dn | squote }}
        {{- end }}
        {{- if $auth.ldap.groups_filter }}
        groups_filter: {{ $auth.ldap.groups_filter | squote }}
        {{- end }}
        permit_referrals: {{ $auth.ldap.permit_referrals }}
        permit_unauthenticated_bind: {{ $auth.ldap.permit_unauthenticated_bind }}
        permit_feature_detection_failure: {{ $auth.ldap.permit_feature_detection_failure }}
        user: {{ $auth.ldap.user | squote }}
        attributes:
          distinguished_name: {{ $auth.ldap.attributes.distinguished_name | default "" | squote }}
          username: {{ $auth.ldap.attributes.username | default "" | squote }}
          display_name: {{ $auth.ldap.attributes.display_name | default "" | squote }}
          mail:  {{ $auth.ldap.attributes.mail | default "" | squote }}
          member_of:  {{ $auth.ldap.attributes.member_of | default "" | squote }}
          group_name:  {{ $auth.ldap.attributes.group_name | default "" | squote }}
      {{- end }}
    {{- end }}
    password_policy:
      standard:
        enabled: {{ .Values.configMap.password_policy.standard.enabled }}
        min_length: {{ .Values.configMap.password_policy.standard.min_length }}
        max_length: {{ .Values.configMap.password_policy.standard.max_length }}
        require_uppercase: {{ .Values.configMap.password_policy.standard.require_uppercase }}
        require_lowercase: {{ .Values.configMap.password_policy.standard.require_lowercase }}
        require_number: {{ .Values.configMap.password_policy.standard.require_number }}
        require_special: {{ .Values.configMap.password_policy.standard.require_special }}
      zxcvbn:
        enabled: {{ .Values.configMap.password_policy.zxcvbn.enabled }}
        min_score: {{ .Values.configMap.password_policy.zxcvbn.min_score }}
    {{- with $session := .Values.configMap.session }}
    session:
      name: {{ $session.name | default "authelia_session" | squote }}
      same_site: {{ $session.same_site | default "lax" | squote }}
      inactivity: {{ include "authelia.func.dquote" ($session.inactivity | default "5 minutes") }}
      expiration: {{ include "authelia.func.dquote" ($session.expiration | default "1 hour") }}
      remember_me: {{ include "authelia.func.dquote" ($session.remember_me | default "1 month") }}
      cookies:
      {{- range $cookie := (required "The value 'configMap.session.cookies' must have at least one configuration" $session.cookies) }}
        - domain: {{ required "All 'domain' values for the 'configMap.session.cookies' configurations must be configured" .domain | squote }}
          authelia_url: {{ include "authelia.ingress.uri" (merge (dict "SubDomain" $cookie.subdomain "Domain" $cookie.domain "Path" $cookie.path) $) | squote }}
          {{- if $cookie.default_redirection_url }}
          default_redirection_url: {{ $cookie.default_redirection_url | squote }}
          {{- end }}
          {{- if $cookie.name }}
          name: {{ $cookie.name | squote }}
          {{- end }}
          {{- if $cookie.same_site }}
          same_site: {{ $cookie.same_site | squote }}
          {{- end }}
          {{- if $cookie.inactivity }}
          inactivity: {{ include "authelia.func.dquote" $cookie.inactivity }}
          {{- end }}
          {{- if $cookie.expiration }}
          expiration: {{ include "authelia.func.dquote" $cookie.expiration }}
          {{- end }}
          {{- if $cookie.remember_me }}
          remember_me: {{ include "authelia.func.dquote" $cookie.remember_me }}
          {{- end }}
      {{- end }}
      {{- if and ($session.redis) ($session.redis.enabled) }}
      redis:
        host: {{ $session.redis.host | squote }}
        port: {{ $session.redis.port | default 6379 }}
        {{- if $session.redis.username }}
        username: {{ $session.redis.username | squote }}
        {{- end }}
        database_index: {{ $session.redis.database_index | default 0 }}
        maximum_active_connections: {{ $session.redis.maximum_active_connections | default 8 }}
        minimum_idle_connections: {{ $session.redis.minimum_idle_connections | default 0 }}
        {{- if $session.redis.tls.enabled }}
        tls:
          server_name: {{ $session.redis.tls.server_name | default "" | squote }}
          skip_verify: {{ $session.redis.tls.skip_verify | default false }}
          minimum_version: {{ $session.redis.tls.minimum_version | default "TLS1.2" | squote }}
          maximum_version: {{ $session.redis.tls.maximum_version | default "TLS1.3" | squote }}
        {{- end }}
        {{- if $session.redis.high_availability.enabled }}
        high_availability:
          sentinel_name: {{ $session.redis.high_availability.sentinel_name | squote }}
          {{- if $session.redis.high_availability.nodes }}
          nodes:
          {{- range $node := $session.redis.high_availability.nodes }}
          - host: {{ $node.host | default "" | squote }}
            port: {{ $node.port | default 26379 }}
          {{- end }}
          {{- end }}
          sentinel_username: {{ $session.redis.high_availability.username | default "" | squote }}
          route_by_latency: {{ $session.redis.high_availability.route_by_latency }}
          route_randomly: {{ $session.redis.high_availability.route_randomly }}
        {{- end }}
      {{- end }}
    {{- end }}
    regulation:
      max_retries: {{ .Values.configMap.regulation.max_retries | default 3 }}
      find_time: {{ include "authelia.func.dquote" (.Values.configMap.regulation.find_time | default "2 minutes") }}
      ban_time: {{ include "authelia.func.dquote" (.Values.configMap.regulation.ban_time | default "2 minutes") }}
    storage:
      {{- with $storage := .Values.configMap.storage }}
      {{- if and ($storage.local) ($storage.local.enabled) }}
      local:
        path: {{ $storage.local.path | squote }}
      {{- end }}
      {{- if and ($storage.mysql) ($storage.mysql.enabled) }}
      mysql:
        address: {{ $storage.mysql.address | squote }}
        timeout: {{ include "authelia.func.dquote" ($storage.mysql.timeout | default "5 seconds") }}
        database: {{ $storage.mysql.database | default "authelia" | squote }}
        username: {{ $storage.mysql.username |  default "authelia" | squote }}
        {{- if $storage.mysql.tls.enabled }}
        tls:
          server_name: {{ $storage.mysql.tls.server_name | default "" | squote }}
          skip_verify: {{ $storage.mysql.tls.skip_verify | default false }}
          minimum_version: {{ $storage.mysql.tls.minimum_version | default "TLS1.2" | squote }}
          maximum_version: {{ $storage.mysql.tls.maximum_version | default "TLS1.3" | squote }}
        {{- end }}
      {{- end }}
      {{- if and ($storage.postgres) ($storage.postgres.enabled) }}
      postgres:
        address: {{ $storage.postgres.address | squote }}
        timeout: {{ include "authelia.func.dquote" ($storage.postgres.timeout | default "5 seconds") }}
        database: {{ $storage.postgres.database | default "authelia" | squote }}
        schema: {{ $storage.postgres.schema | default "public" | squote }}
        username: {{ $storage.postgres.username | default "authelia" | squote }}
        {{- if $storage.postgres.tls.enabled }}
        tls:
          server_name: {{ $storage.postgres.tls.server_name | default "" | squote }}
          skip_verify: {{ $storage.postgres.tls.skip_verify | default false }}
          minimum_version: {{ $storage.postgres.tls.minimum_version | default "TLS1.2" | squote }}
          maximum_version: {{ $storage.postgres.tls.maximum_version | default "TLS1.3" | squote }}
        {{- end }}
    {{- end }}
    {{- end }}
    {{- with $notifier := .Values.configMap.notifier }}
    notifier:
      disable_startup_check: {{ $.Values.configMap.notifier.disable_startup_check }}
    {{- if $notifier.filesystem.enabled }}
      filesystem:
        filename: {{ $notifier.filesystem.filename | squote }}
    {{- end }}
    {{- if $notifier.smtp.enabled }}
      smtp:
        address: {{ $notifier.smtp.address | squote }}
        timeout: {{ include "authelia.func.dquote" ($notifier.smtp.timeout | default "5 seconds") }}
        username: {{ $notifier.smtp.username | squote }}
        sender: {{ $notifier.smtp.sender | squote }}
        identifier: {{ $notifier.smtp.identifier | squote }}
        subject: {{ $notifier.smtp.subject | squote }}
        startup_check_address: {{ $notifier.smtp.startup_check_address | squote }}
        disable_html_emails: {{ $notifier.smtp.disable_html_emails }}
        disable_require_tls: {{ $notifier.smtp.disable_require_tls }}
        disable_starttls: {{ $notifier.smtp.disable_starttls | default false }}
        tls:
          server_name: {{ $notifier.smtp.tls.server_name | default "" | squote }}
          skip_verify: {{ $notifier.smtp.tls.skip_verify | default false }}
          minimum_version: {{ $notifier.smtp.tls.minimum_version | default "TLS1.2" | squote }}
          maximum_version: {{ $notifier.smtp.tls.maximum_version | default "TLS1.3" | squote }}
    {{- end }}
    {{- end }}
    {{- if .Values.configMap.identity_providers.oidc.enabled }}
    identity_providers:
      oidc:
        lifespans:
          access_token: {{ include "authelia.func.dquote" (.Values.configMap.identity_providers.oidc.lifespans.access_token | default "1 hour") }}
          authorize_code: {{ include "authelia.func.dquote" (.Values.configMap.identity_providers.oidc.lifespans.authorize_code | default "1 minute") }}
          id_token: {{ include "authelia.func.dquote" (.Values.configMap.identity_providers.oidc.lifespans.id_token | default "1 hour") }}
          refresh_token: {{ include "authelia.func.dquote" (.Values.configMap.identity_providers.oidc.lifespans.refresh_token | default "1 hour and 30 minutes") }}
        {{- if .Values.configMap.identity_providers.oidc.lifespans.custom }}
          custom:
          {{- range $key, $lifespan := .Values.configMap.identity_providers.oidc.lifespans.custom }}
            {{ $key }}:
              access_token: {{ include "authelia.func.dquote" ($lifespan.access_token | default $.Values.configMap.identity_providers.oidc.lifespans.access_token | default "1 hour") }}
              authorize_code: {{ include "authelia.func.dquote" ($lifespan.authorize_code | default $.Values.configMap.identity_providers.oidc.lifespans.authorize_code | default "1 minute") }}
              id_token: {{ include "authelia.func.dquote" ($lifespan.id_token | default $.Values.configMap.identity_providers.oidc.lifespans.id_token | default "1 hour") }}
              refresh_token: {{ include "authelia.func.dquote" ($lifespan.refresh_token | default $.Values.configMap.identity_providers.oidc.lifespans.refresh_token | default "1 hour and 30 minutes") }}
            {{- if $lifespan.grants }}
              grants:
              {{- if $lifespan.grants.authorize_code }}
                authorize_code:
                  access_token: {{ include "authelia.func.dquote" ($lifespan.grants.authorize_code.access_token | default $lifespan.access_token | default $.Values.configMap.identity_providers.oidc.lifespans.access_token | default "1 hour") }}
                  authorize_code: {{ include "authelia.func.dquote" ($lifespan.grants.authorize_code.authorize_code | default $lifespan.authorize_code | default $.Values.configMap.identity_providers.oidc.lifespans.authorize_code | default "1 minute") }}
                  id_token: {{ include "authelia.func.dquote" ($lifespan.grants.authorize_code.id_token | default $lifespan.id_token | default $.Values.configMap.identity_providers.oidc.lifespans.id_token | default "1 hour") }}
                  refresh_token: {{ include "authelia.func.dquote" ($lifespan.grants.authorize_code.refresh_token | default $lifespan.refresh_token | default $.Values.configMap.identity_providers.oidc.lifespans.refresh_token | default "1 hour and 30 minutes") }}
              {{- end }}
              {{- if $lifespan.grants.implicit }}
                implicit:
                  access_token: {{ include "authelia.func.dquote" ($lifespan.grants.implicit.access_token | default $lifespan.access_token | default $.Values.configMap.identity_providers.oidc.lifespans.access_token | default "1 hour") }}
                  authorize_code: {{ include "authelia.func.dquote" ($lifespan.grants.implicit.authorize_code | default $lifespan.authorize_code | default $.Values.configMap.identity_providers.oidc.lifespans.authorize_code | default "1 minute") }}
                  id_token: {{ include "authelia.func.dquote" ($lifespan.grants.implicit.id_token | default $lifespan.id_token | default $.Values.configMap.identity_providers.oidc.lifespans.id_token | default "1 hour") }}
                  refresh_token: {{ include "authelia.func.dquote" ($lifespan.grants.implicit.refresh_token | default $lifespan.refresh_token | default $.Values.configMap.identity_providers.oidc.lifespans.refresh_token | default "1 hour and 30 minutes") }}
              {{- end }}
              {{- if $lifespan.grants.client_credentials }}
                client_credentials:
                  access_token: {{ include "authelia.func.dquote" ($lifespan.grants.client_credentials.access_token | default $lifespan.access_token | default $.Values.configMap.identity_providers.oidc.lifespans.access_token | default "1 hour") }}
                  authorize_code: {{ include "authelia.func.dquote" ($lifespan.grants.client_credentials.authorize_code | default $lifespan.authorize_code | default $.Values.configMap.identity_providers.oidc.lifespans.authorize_code | default "1 minute") }}
                  id_token: {{ include "authelia.func.dquote" ($lifespan.grants.client_credentials.id_token | default $lifespan.id_token | default $.Values.configMap.identity_providers.oidc.lifespans.id_token | default "1 hour") }}
                  refresh_token: {{ include "authelia.func.dquote" ($lifespan.grants.client_credentials.refresh_token | default $lifespan.refresh_token | default $.Values.configMap.identity_providers.oidc.lifespans.refresh_token | default "1 hour and 30 minutes") }}
              {{- end }}
              {{- if $lifespan.grants.refresh_token }}
                refresh_token:
                  access_token: {{ include "authelia.func.dquote" ($lifespan.grants.refresh_token.access_token | default $lifespan.access_token | default $.Values.configMap.identity_providers.oidc.lifespans.access_token | default "1 hour") }}
                  authorize_code: {{ include "authelia.func.dquote" ($lifespan.grants.refresh_token.authorize_code | default $lifespan.authorize_code | default $.Values.configMap.identity_providers.oidc.lifespans.authorize_code | default "1 minute") }}
                  id_token: {{ include "authelia.func.dquote" ($lifespan.grants.refresh_token.id_token | default $lifespan.id_token | default $.Values.configMap.identity_providers.oidc.lifespans.id_token | default "1 hour") }}
                  refresh_token: {{ include "authelia.func.dquote" ($lifespan.grants.refresh_token.refresh_token | default $lifespan.refresh_token | default $.Values.configMap.identity_providers.oidc.lifespans.refresh_token | default "1 hour and 30 minutes") }}
              {{- end }}
              {{- if $lifespan.grants.jwt_bearer }}
                jwt_bearer:
                  access_token: {{ include "authelia.func.dquote" ($lifespan.grants.jwt_bearer.access_token | default $lifespan.access_token | default $.Values.configMap.identity_providers.oidc.lifespans.access_token | default "1 hour") }}
                  authorize_code: {{ include "authelia.func.dquote" ($lifespan.grants.jwt_bearer.authorize_code | default $lifespan.authorize_code | default $.Values.configMap.identity_providers.oidc.lifespans.authorize_code | default "1 minute") }}
                  id_token: {{ include "authelia.func.dquote" ($lifespan.grants.jwt_bearer.id_token | default $lifespan.id_token | default $.Values.configMap.identity_providers.oidc.lifespans.id_token | default "1 hour") }}
                  refresh_token: {{ include "authelia.func.dquote" ($lifespan.grants.jwt_bearer.refresh_token | default $lifespan.refresh_token | default $.Values.configMap.identity_providers.oidc.lifespans.refresh_token | default "1 hour and 30 minutes") }}
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
        enforce_pkce: {{ .Values.configMap.identity_providers.oidc.enforce_pkce | default "public_clients_only" | squote }}
        enable_pkce_plain_challenge: {{ .Values.configMap.identity_providers.oidc.enable_pkce_plain_challenge | default false }}
        enable_client_debug_messages: {{ .Values.configMap.identity_providers.oidc.enable_client_debug_messages | default false }}
        enable_jwt_access_token_stateless_introspection: {{ .Values.configMap.identity_providers.oidc.enable_jwt_access_token_stateless_introspection | default false }}
        minimum_parameter_entropy: {{ .Values.configMap.identity_providers.oidc.minimum_parameter_entropy | default 8 }}
        discovery_signed_response_alg: {{ .Values.configMap.identity_providers.oidc.discovery_signed_response_alg | default "" | squote }}
        discovery_signed_response_key_id: {{ .Values.configMap.identity_providers.oidc.discovery_signed_response_key_id | default "" | squote }}
        require_pushed_authorization_requests: {{ .Values.configMap.identity_providers.oidc.require_pushed_authorization_requests | default false }}
        {{- with .Values.configMap.identity_providers.oidc.authorization_policies }}
        authorization_policies:
        {{- range $name, $policy := $.Values.configMap.identity_providers.oidc.authorization_policies }}
          {{ $name }}:
            default_policy: {{ $policy.default_policy | default "deny" | squote }}
            {{- with $policy.rules }}
            rules:
            {{- range $policy.rules }}
            - policy: {{ .policy | default "deny" | squote }}
              subject: {{ .subject | squote }}
            {{- end }}
            {{- end }}
        {{- end }}
        {{- end }}
        jwks:
        {{- range $key := .Values.configMap.identity_providers.oidc.jwks }}
        {{- tpl ($.Files.Get "files/configuration.oidc.jwk.yaml") (merge (dict "Key" $key "Indent" 6) $) | trim | nindent 10 }}
        {{- end }}
        cors:
          {{- if .Values.configMap.identity_providers.oidc.cors.endpoints }}
          endpoints:
          {{- range $endpoint := .Values.configMap.identity_providers.oidc.cors.endpoints }}
          - {{ $endpoint | squote }}
          {{- end }}
          {{- end }}
          {{- if .Values.configMap.identity_providers.oidc.cors.allowed_origins }}
          allowed_origins:
          {{- range $origin := .Values.configMap.identity_providers.oidc.cors.allowed_origins }}
          - {{ $origin | squote }}
          {{- end }}
          {{- end }}
          allowed_origins_from_client_redirect_uris: {{ .Values.configMap.identity_providers.oidc.cors.allowed_origins_from_client_redirect_uris }}
      {{- if .Values.configMap.identity_providers.oidc.clients }}
        clients:
      {{- range $client := .Values.configMap.identity_providers.oidc.clients }}
        {{- tpl ($.Files.Get "files/configuration.oidc.client.yaml") (merge (dict "Client" $client) $) | trim | nindent 10 }}
      {{- end }}
        {{- end }}
    {{- end }}
    {{- if and (not (include "authelia.mount.acl.secret" .)) }}
    {{- tpl (.Files.Get "files/configuration.acl.yaml") . | trim | nindent 4 }}
    {{- end }}
    ...
    {{- end }}
