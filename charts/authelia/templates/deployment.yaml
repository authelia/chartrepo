{{- $kind := (include "authelia.pod.kind" .) }}
---
apiVersion: {{ include "capabilities.apiVersion.kind" (merge (dict "Kind" $kind) .) }}
kind: {{ $kind }}
metadata:
  name: {{ include "authelia.name" . }}
  labels: {{ include "authelia.labels" (merge (dict "Labels" .Values.pod.labels) .) | nindent 4 }}
  {{- with $annotations := include "authelia.annotations" (merge (dict "Annotations" .Values.pod.annotations) .) }}
  annotations: {{ $annotations | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels: {{ include "authelia.matchLabels" . | nindent 6 }}
  revisionHistoryLimit: {{ default 5 .Values.pod.revisionHistoryLimit }}
  {{- if or (eq "StatefulSet" $kind) (eq "Deployment" $kind) }}
  replicas: {{ include "authelia.replicas" . }}
  {{- end }}
  {{- if or (eq "Deployment" $kind) (eq "DaemonSet" $kind) }}
  minReadySeconds: {{ default 0 .Values.pod.minReadySeconds }}
  {{- end }}
  {{- if (eq "Deployment" $kind)}}
  {{- $type := include "authelia.deploymentStrategy" . }}
  strategy:
    type: {{ $type }}
    {{- if eq "RollingUpdate" $type }}
    rollingUpdate: {{ (include "authelia.rollingUpdate" .) | nindent 6 }}
    {{- end }}
  {{- end }}
  {{- if (or (eq "DaemonSet" $kind) (eq "StatefulSet" $kind)) }}
  {{- $type := include "authelia.deploymentStrategy" . }}
  updateStrategy:
    type: {{ $type }}
    {{- if eq "RollingUpdate" $type }}
    rollingUpdate: {{ (include "authelia.rollingUpdate" .) | nindent 6 }}
    {{- end }}
  {{- end }}
  {{- if eq "StatefulSet" $kind }}
  podManagementPolicy: {{ include "authelia.podManagementPolicy" . }}
  serviceName: {{ default (include "authelia.name" .) .Values.pod.serviceName }}
  {{- end }}
  {{- if eq "Deployment" $kind }}
  {{- end }}
  template:
    metadata:
      labels: {{ include "authelia.labels" (merge (dict "Labels" .Values.pod.labels) .) | nindent 8 }}
      annotations:
        {{- if (include "authelia.generate.configMap" .) }}
        checksum/config: {{ include (print $.Template.BasePath "/configMap.yaml") . | sha256sum }}
        {{- end }}
        {{- if (include "authelia.generate.acl.secret" .) }}
        checksum/acl: {{ include (print $.Template.BasePath "/secretACL.yaml") . | sha256sum }}
        {{- end }}
        {{ if and (include "authelia.enabled.secret" .) (not .Values.secret.excludeVolumeAndMounts) -}}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
        {{- with $annotations := include "authelia.annotations" (merge (dict "Annotations" .Values.pod.annotations) .) }}
        {{- $annotations | nindent 8 }}
        {{- end }}
    spec:
      {{- with $tolerations := .Values.pod.tolerations }}
      tolerations: {{ toYaml $tolerations | nindent 8 }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      {{- if (include "authelia.pod.priorityClassName.enabled" .) }}
      priorityClassName: {{ .Values.pod.priorityClassName }}
      {{- end }}
      {{- with $nodeName := .Values.pod.selectors.nodeName }}
      nodeName: {{ $nodeName }}
      {{- end }}
      {{- with $selector := .Values.pod.selectors.nodeSelector }}
      nodeSelector: {{ toYaml $selector | nindent 8 }}
      {{- end }}
      {{- with $affinity := .Values.pod.selectors.affinity }}
      affinity: {{ toYaml $affinity | nindent 8 }}
      {{- end }}
      {{- with $context := .Values.pod.securityContext.container }}
      securityContext: {{ toYaml $context | nindent 8 }}
      {{- end }}
      {{- if .Values.rbac.enabled }}
      serviceAccountName: {{ default (include "authelia.name" .) .Values.rbac.serviceAccountName }}
      {{- end }}
      enableServiceLinks: {{ .Values.pod.enableServiceLinks | default false }}
      containers:
      - name: authelia
        image: {{ include "authelia.image" . }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
        command: ["authelia"]
        {{- with $resources :=.Values.pod.resources }}
        resources: {{ toYaml $resources | nindent 10 }}
        {{- end }}
        env:
        - name: AUTHELIA_SERVER_DISABLE_HEALTHCHECK
          value: "true"
        - name: AUTHELIA_JWT_SECRET_FILE
          value: {{ include "authelia.secret.fullPath" (merge (dict "Secret" "jwt") .) }}
        - name: AUTHELIA_SESSION_SECRET_FILE
          value: {{ include "authelia.secret.fullPath" (merge (dict "Secret" "session") .) }}
        {{- if .Values.configMap.authentication_backend.ldap.enabled }}
        - name: AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE
          value: {{ include "authelia.secret.fullPath" (merge (dict "Secret" "ldap") .) }}
        {{- end }}
        {{- if and .Values.configMap.notifier.smtp.enabled .Values.configMap.notifier.smtp.enabledSecret }}
        - name: AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE
          value: {{ include "authelia.secret.fullPath" (merge (dict "Secret" "smtp") .) }}
        {{- end }}
        - name: AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE
          value: {{ include "authelia.secret.fullPath" (merge (dict "Secret" "storageEncryptionKey") .) }}
        {{- if .Values.configMap.storage.postgres.enabled }}
        - name: AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE
          value: {{ include "authelia.secret.fullPath" (merge (dict "Secret" "storage") .) }}
        {{- end }}
        {{- if .Values.configMap.storage.mysql.enabled }}
        - name: AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE
          value: {{ include "authelia.secret.fullPath" (merge (dict "Secret" "storage") .) }}
        {{- end }}
        {{- if and .Values.configMap.session.redis.enabled .Values.configMap.session.redis.enabledSecret }}
        - name: AUTHELIA_SESSION_REDIS_PASSWORD_FILE
          value: {{ include "authelia.secret.fullPath" (merge (dict "Secret" "redis") .) }}
        {{- end }}
        {{- if and .Values.configMap.session.redis.high_availability.enabled .Values.configMap.session.redis.high_availability.enabledSecret }}
        - name: AUTHELIA_SESSION_REDIS_HIGH_AVAILABILITY_SENTINEL_PASSWORD_FILE
          value: {{ include "authelia.secret.fullPath" (merge (dict "Secret" "redis-sentinel") .) }}
        {{- end }}
        {{- if and (include "authelia.configured.duo" .) (or (include "authelia.configured.duoSecret" .) (hasKey .Values.secret "existingSecret")) }}
        - name: AUTHELIA_DUO_API_SECRET_KEY_FILE
          value: {{ include "authelia.secret.fullPath" (merge (dict "Secret" "duo") .) }}
        {{- end }}
        {{- if .Values.configMap.identity_providers.oidc.enabled }}
        - name: AUTHELIA_IDENTITY_PROVIDERS_OIDC_HMAC_SECRET_FILE
          value: {{ include "authelia.secret.fullPath" (merge (dict "Secret" "oidc-hmac-secret") .) }}
        - name: AUTHELIA_IDENTITY_PROVIDERS_OIDC_ISSUER_PRIVATE_KEY_FILE
          value: {{ include "authelia.secret.fullPath" (merge (dict "Secret" "oidc-private-key") .) }}
        {{- end }}
        - name: X_AUTHELIA_CONFIG
          value: {{ (include "authelia.config.paths" .) | squote }}
        {{- if .Values.configMap.filters.enableTemplating }}
        - name: X_AUTHELIA_CONFIG_FILTERS
          value: 'template'
        {{- end }}
        {{- with $env := .Values.pod.env }}{{ toYaml $env | nindent 8 }}{{- end }}
        {{- with $probe := include "authelia.merge.probe" (merge (dict "Type" "startup" "Method" .Values.pod.probes.method "Probe" .Values.pod.probes.startup) .) }}
        {{- $probe | nindent 8 }}
        {{- end }}
        {{- with $probe := include "authelia.merge.probe" (merge (dict "Type" "liveness" "Method" .Values.pod.probes.method "Probe" .Values.pod.probes.liveness) .) }}
        {{- $probe | nindent 8 }}
        {{- end }}
        {{- with $probe := include "authelia.merge.probe" (merge (dict "Type" "readiness" "Method" .Values.pod.probes.method "Probe" .Values.pod.probes.readiness) .) }}
        {{- $probe | nindent 8 }}
        {{- end }}
        ports:
        - name: http
          containerPort: {{ .Values.configMap.port | default 9091 }}
          protocol: TCP
        {{- if .Values.configMap.telemetry.metrics.enabled }}
        - name: metrics
          containerPort: {{ .Values.configMap.telemetry.metrics.port | default 9959 }}
          protocol: TCP
        {{- end }}
        volumeMounts:
        {{- if (include "authelia.enabled.persistentVolumeClaim" .) }}
        - mountPath: /config
          name: authelia
          readOnly: {{ .Values.persistence.readOnly }}
          {{- with $subPath := .Values.persistence.subPath }}
          subPath: {{ $subPath }}
          {{- end }}
          {{- with $subPathExpr := .Values.persistence.subPathExpr }}
          subPathExpr: {{ $subPathExpr }}
          {{- end }}
          {{- with $mountPropagation := .Values.persistence.mountPropagation }}
          mountPropagation: {{ $mountPropagation }}
          {{- end }}
        {{- end }}
        {{- if (include "authelia.enabled.configMap" .) }}
        - mountPath: /configuration.yaml
          name: config
          readOnly: true
          subPath: configuration.yaml
        {{- end }}
        {{- if (include "authelia.mount.acl.secret" .) }}
        - mountPath: /configuration.acl.yaml
          name: config-acl
          readOnly: true
          subPath: configuration.acl.yaml
        {{- end }}
        {{- if (not .Values.secret.excludeVolumeAndMounts) }}
        - mountPath: {{ include "authelia.secret.mountPath" . }}
          name: secrets
          readOnly: true
        {{- end }}
        {{- if (include "authelia.enabled.certificatesSecret" .) }}
        - mountPath: /certificates
          name: certificates
          readOnly: true
        {{- end }}
        {{- with $mounts := .Values.pod.extraVolumeMounts }}
          {{- toYaml $mounts | nindent 8 }}
        {{- end }}
      {{- with $context := .Values.pod.securityContext.pod }}
        securityContext: {{ toYaml $context | nindent 10 }}
      {{- end }}
      {{- with $pullSecrets := .Values.image.pullSecrets }}
      imagePullSecrets: {{- range $k, $secretName := $pullSecrets }}
      - name: {{ $secretName }}
      {{- end }}
      {{- end }}
      volumes:
      {{- if (include "authelia.enabled.persistentVolumeClaim" .) }}
      - name: authelia
        persistentVolumeClaim:
          claimName: {{ default (include "authelia.name" .) .Values.persistence.existingClaim }}
      {{- end }}
      {{- if (include "authelia.enabled.configMap" .) }}
      - name: config
        configMap:
          name: {{ default (include "authelia.name" .) .Values.configMap.existingConfigMap }}
          items:
          - key: {{ default "configuration.yaml" .Values.configMap.key }}
            path: configuration.yaml
      {{- end }}
      {{- if (include "authelia.mount.acl.secret" .) }}
      - name: config-acl
        secret:
          secretName: {{ include "authelia.name.acl.secret" . }}
          items:
          - key: {{ default "configuration.acl.yaml" .Values.configMap.access_control.secret.key }}
            path: configuration.acl.yaml
      {{- end }}
      {{- if (not .Values.secret.excludeVolumeAndMounts) }}
      - name: secrets
        secret:
          secretName: {{ default (include "authelia.name" .) .Values.secret.existingSecret }}
          items:
          - key: {{ default "JWT_TOKEN" .Values.secret.jwt.key }}
            path: {{ include "authelia.secret.path" (merge (dict "Secret" "jwt") .) }}
          - key: {{ default "SESSION_ENCRYPTION_KEY" .Values.secret.session.key }}
            path: {{ include "authelia.secret.path" (merge (dict "Secret" "session") .) }}
          - key: {{ default "STORAGE_ENCRYPTION_KEY" .Values.secret.storageEncryptionKey.key }}
            path: {{ include "authelia.secret.path" (merge (dict "Secret" "storageEncryptionKey") .) }}
          {{- if or .Values.configMap.storage.postgres.enabled .Values.configMap.storage.mysql.enabled }}
          - key: {{ default "STORAGE_PASSWORD" .Values.secret.storage.key }}
            path: {{ include "authelia.secret.path" (merge (dict "Secret" "storage") .) }}
          {{- end }}
          {{- if .Values.configMap.authentication_backend.ldap.enabled }}
          - key: {{ default "LDAP_PASSWORD" .Values.secret.ldap.key }}
            path: {{ include "authelia.secret.path" (merge (dict "Secret" "ldap") .) }}
          {{- end }}
          {{- if and .Values.configMap.notifier.smtp.enabled .Values.configMap.notifier.smtp.enabledSecret }}
          - key: {{ default "SMTP_PASSWORD" .Values.secret.smtp.key }}
            path: {{ include "authelia.secret.path" (merge (dict "Secret" "smtp") .) }}
          {{- end }}
          {{- if and .Values.configMap.session.redis.enabled .Values.configMap.session.redis.enabledSecret }}
          - key: {{ default "REDIS_PASSWORD" .Values.secret.redis.key }}
            path: {{ include "authelia.secret.path" (merge (dict "Secret" "redis") .) }}
            {{- end }}
            {{- if and .Values.configMap.session.redis.high_availability.enabled .Values.configMap.session.redis.high_availability.enabledSecret }}
          - key: {{ default "REDIS_SENTINEL_PASSWORD" .Values.secret.redisSentinel.key }}
            path: {{ include "authelia.secret.path" (merge (dict "Secret" "redis-sentinel") .) }}
          {{- end }}
          {{- if and (include "authelia.configured.duo" .) (or (include "authelia.configured.duoSecret" .) (hasKey .Values.secret "existingSecret")) }}
          - key: {{ default "DUO_API_KEY" .Values.secret.duo.key }}
            path: {{ include "authelia.secret.path" (merge (dict "Secret" "duo") .) }}
          {{- end }}
          {{- if .Values.configMap.identity_providers.oidc.enabled }}
          - key: {{ default "OIDC_PRIVATE_KEY" .Values.secret.oidcPrivateKey.key }}
            path: {{ include "authelia.secret.path" (merge (dict "Secret" "oidc-private-key") .) }}
          - key: {{ default "OIDC_HMAC_SECRET" .Values.secret.oidcHMACSecret.key }}
            path: {{ include "authelia.secret.path" (merge (dict "Secret" "oidc-hmac-secret") .) }}
          {{- end }}
      {{- end }}
      {{- if (include "authelia.enabled.certificatesSecret" .) }}
      - name: certificates
        secret:
          secretName: {{ include "authelia.names.certificatesSecret" . }}
      {{- end }}
      {{- with .Values.pod.extraVolumes }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
